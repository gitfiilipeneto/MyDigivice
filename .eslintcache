[{"/home/filipe/Documentos/MyDigivice/src/index.js":"1","/home/filipe/Documentos/MyDigivice/src/App.jsx":"2","/home/filipe/Documentos/MyDigivice/src/components/Hero.jsx":"3","/home/filipe/Documentos/MyDigivice/src/components/ApiRender.jsx":"4","/home/filipe/Documentos/MyDigivice/src/apiCall/ApiCall.js":"5","/home/filipe/Documentos/MyDigivice/src/resources/defaultNavBar.jsx":"6"},{"size":417,"mtime":1609822126808,"results":"7","hashOfConfig":"8"},{"size":582,"mtime":1609806674261,"results":"9","hashOfConfig":"8"},{"size":857,"mtime":1609818807456,"results":"10","hashOfConfig":"8"},{"size":1597,"mtime":1609806877680,"results":"11","hashOfConfig":"8"},{"size":185,"mtime":1609817781614,"results":"12","hashOfConfig":"8"},{"size":1391,"mtime":1609822095025,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"r28yt5",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/filipe/Documentos/MyDigivice/src/index.js",["29"],"/home/filipe/Documentos/MyDigivice/src/App.jsx",[],["30","31"],"/home/filipe/Documentos/MyDigivice/src/components/Hero.jsx",["32","33","34"],"import {useEffect, useState} from 'react'\nimport React from 'react'\nimport styled from 'styled-components'\nimport GetDigimons from '../apiCall/ApiCall'\n\nconst StyledContainer = styled.div`\nwidth:100vw;\nheight:100vh;\nmax-width:100%;\ndisplay:flex;\njustify-content: center;\nalign-items: center;\n`\n\nconst styledH1 = styled.h1`\nfont-size: 96px;\n`\n\nconst HeroSection = () => {\n    const [list,setList] = useState([])\n//     useEffect(() => {\n//         let mounted = true;\n//         GetDigimons()\n//         .then( items => {if (mounted){\n//             setList(items)\n//         }\n//     })\n//     return () => mounted = false\n// },[])\n    GetDigimons()\n    .then(itens => {setList(itens)})\n\nreturn(\n    <div>\n        <ul>\n            {list.map(digimon => <li key = {digimon.name}>{digimon.name}</li>)}\n        </ul>\n    </div>\n)\n}\n \n\nexport default HeroSection","/home/filipe/Documentos/MyDigivice/src/components/ApiRender.jsx",["35"],"import React, { useState } from 'react'\nimport styled from 'styled-components'\n\n\n\n\nconst StyledContainer = styled.div`\n  // width: 100vw;\n  // max-width: 100%;\n  height: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`\nconst StyledCard = styled.div`\n  border-bottom: 1px solid black;\n  margin: 5px;\n  width: max-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-item: center;\n  text-align:center;\n`\nconst StyledImg = styled.img`\n  max-height: 300px;\n`\n\nconst StyledButton = styled.button`\n  margin: 10px;\n  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n  background-color: #f44336;\n  border: none;\n  text-align: center;\n  padding: 10px 25px;\n  color: white;\n  font-size:20px;\n\n`\n\nconst Digimons = ({ digimons }) => {\n  \n  const[init,setInit] = useState(0)\n\n  let end = init + 1\n\n  if(init === -1, end === 0){\n    return setInit(init + 1)\n    \n  }else{\n  \n  return (\n    \n \n\n    <StyledContainer>\n    \n      {digimons.slice(init,end).map((digimon) => (\n        <div>\n         \n          <StyledCard>\n            <h1>{digimon.name}</h1>\n            <StyledImg src = {digimon.img} alt =''></StyledImg>\n            <p>{digimon.level}</p>\n          </StyledCard>\n          </div>\n                    \n      ))}\n      <div>\n        <StyledButton  onClick={() => setInit(init - 1)}>\n          prev\n        </StyledButton>\n        <StyledButton onClick={() => setInit(init + 1)}>\n          next\n        </StyledButton>\n      </div>\n\n    </StyledContainer>\n  )\n}\n};\n\nexport default Digimons","/home/filipe/Documentos/MyDigivice/src/apiCall/ApiCall.js",[],"/home/filipe/Documentos/MyDigivice/src/resources/defaultNavBar.jsx",["36","37","38"],{"ruleId":"39","severity":1,"message":"40","line":5,"column":8,"nodeType":"41","messageId":"42","endLine":5,"endColumn":19},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"39","severity":1,"message":"47","line":1,"column":9,"nodeType":"41","messageId":"42","endLine":1,"endColumn":18},{"ruleId":"39","severity":1,"message":"48","line":6,"column":7,"nodeType":"41","messageId":"42","endLine":6,"endColumn":22},{"ruleId":"39","severity":1,"message":"49","line":15,"column":7,"nodeType":"41","messageId":"42","endLine":15,"endColumn":15},{"ruleId":"50","severity":1,"message":"51","line":48,"column":17,"nodeType":"52","messageId":"53","endLine":48,"endColumn":18},{"ruleId":"54","severity":1,"message":"55","line":11,"column":17,"nodeType":"56","endLine":11,"endColumn":42},{"ruleId":"54","severity":1,"message":"55","line":18,"column":29,"nodeType":"56","endLine":18,"endColumn":77},{"ruleId":"54","severity":1,"message":"55","line":22,"column":29,"nodeType":"56","endLine":22,"endColumn":50},"no-unused-vars","'HeroSection' is defined but never used.","Identifier","unusedVar","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"'useEffect' is defined but never used.","'StyledContainer' is assigned a value but never used.","'styledH1' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]